#What is the Jupyter Notebook?
#Introduction
  The Jupyter Notebook is an interactive computing environment that enables users to author notebook documents 
  that include: - Live code - Interactive widgets - Plots - Narrative text - Equations - Images - Video
  
  These documents provide a complete and self-contained record of a computation that can be converted to various 
  formats and shared with others using email, Dropbox, version control systems (like git/GitHub) or nbviewer.jupyter.org.
#Components
  The Jupyter Notebook combines three components:

  #The notebook web application: An interactive web application for writing and running code interactively and authoring 
  notebook documents.

  #Kernels: Separate processes started by the notebook web application that runs users’ code in a given language and 
  returns output back to the notebook web application. The kernel also handles things like computations for interactive 
  widgets, tab completion and introspection.

  #Notebook documents: Self-contained documents that contain a representation of all content visible in the notebook web 
  application, including inputs and outputs of the computations, narrative text, equations, images, and rich media representations 
  of objects. Each notebook document has its own kernel.
  
#Notebook web application
  #The notebook web application enables users to:

  #Edit code in the browser, with automatic syntax highlighting, indentation, and tab completion/introspection.

  #Run code from the browser, with the results of computations attached to the code which generated them.

  #See the results of computations with rich media representations, such as HTML, LaTeX, PNG, SVG, PDF, etc.

  #Create and use interactive JavaScript widgets, which bind interactive user interface controls and visualizations to 
  reactive kernel side computations.

  #Author narrative text using the Markdown markup language.

  #Include mathematical equations using LaTeX syntax in Markdown, which are rendered in-browser by MathJax.  
  
#Kernels
  #Through Jupyter’s kernel and messaging architecture, the Notebook allows code to be run in a range of different programming languages. For each notebook document that a user opens, the web application starts a kernel that runs the code for that notebook. Each kernel is capable of running code in a single programming language and there are kernels available in the following languages:

    #Python(https://github.com/ipython/ipython)

    #Julia (https://github.com/JuliaLang/IJulia.jl)

    #R (https://github.com/IRkernel/IRkernel)

    #Ruby (https://github.com/minrk/iruby)

    #Haskell (https://github.com/gibiansky/IHaskell)

    #Scala (https://github.com/Bridgewater/scala-notebook)

    #node.js (https://gist.github.com/Carreau/4279371)

    #Go (https://github.com/takluyver/igo)

  The default kernel runs Python code. The notebook provides a simple way for users to pick which of these kernels is used 
  for a given notebook.

  Each of these kernels communicate with the notebook web application and web browser using a JSON over ZeroMQ/WebSockets 
  message protocol that is described here. Most users don’t need to know about these details, but it helps to understand 
  that “kernels run code.”  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
